use std::ops::{Index, IndexMut};

pub type Color = (u8, u8, u8);

pub const PALETTE_TABLE_LEN: usize = 32;
type PaletteData = [u8; PALETTE_TABLE_LEN];

const PALETTE_ENTRY_LEN: usize = 4;
pub type PaletteEntry = [u8; PALETTE_ENTRY_LEN];

pub struct Palette {
    data: PaletteData,
}

impl Palette {
    pub fn background_entry(&self, index: usize) -> PaletteEntry {
        let palette_start = (index * PALETTE_ENTRY_LEN) + 1;
        [
            self[0], // Background color
            self[palette_start],
            self[palette_start + 1],
            self[palette_start + 2],
        ]
    }

    pub fn sprite_entry(&self, index: usize) -> PaletteEntry {
        // The palette table starts at 0x3F00 but the sprite entries do at 0x3F11
        let start = 0x11 + (index * PALETTE_ENTRY_LEN);
        [
            0, // Transparant
            self[start],
            self[start + 1],
            self[start + 2],
        ]
    }

    pub const fn get(palette: PaletteEntry, index: usize) -> Color {
        PALETTE_TABLE[palette[index] as usize]
    }

    const fn mirror(mut addr: usize) -> usize {
        addr %= PALETTE_TABLE_LEN;
        // A few entries are mirrored seemingly without reasoning
        match addr {
            0x10 | 0x14 | 0x18 | 0x1C => addr - 0x10,
            _ => addr,
        }
    }
}

impl Default for Palette {
    fn default() -> Self {
        Self {
            data: [0; PALETTE_TABLE_LEN],
        }
    }
}

impl Index<usize> for Palette {
    type Output = u8;

    fn index(&self, index: usize) -> &Self::Output {
        &self.data[Self::mirror(index)]
    }
}

impl IndexMut<usize> for Palette {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        &mut self.data[Self::mirror(index)]
    }
}

pub const PALETTE_TABLE: [Color; 64] = [
    (0x80, 0x80, 0x80),
    (0x00, 0x3D, 0xA6),
    (0x00, 0x12, 0xB0),
    (0x44, 0x00, 0x96),
    (0xA1, 0x00, 0x5E),
    (0xC7, 0x00, 0x28),
    (0xBA, 0x06, 0x00),
    (0x8C, 0x17, 0x00),
    (0x5C, 0x2F, 0x00),
    (0x10, 0x45, 0x00),
    (0x05, 0x4A, 0x00),
    (0x00, 0x47, 0x2E),
    (0x00, 0x41, 0x66),
    (0x00, 0x00, 0x00),
    (0x05, 0x05, 0x05),
    (0x05, 0x05, 0x05),
    (0xC7, 0xC7, 0xC7),
    (0x00, 0x77, 0xFF),
    (0x21, 0x55, 0xFF),
    (0x82, 0x37, 0xFA),
    (0xEB, 0x2F, 0xB5),
    (0xFF, 0x29, 0x50),
    (0xFF, 0x22, 0x00),
    (0xD6, 0x32, 0x00),
    (0xC4, 0x62, 0x00),
    (0x35, 0x80, 0x00),
    (0x05, 0x8F, 0x00),
    (0x00, 0x8A, 0x55),
    (0x00, 0x99, 0xCC),
    (0x21, 0x21, 0x21),
    (0x09, 0x09, 0x09),
    (0x09, 0x09, 0x09),
    (0xFF, 0xFF, 0xFF),
    (0x0F, 0xD7, 0xFF),
    (0x69, 0xA2, 0xFF),
    (0xD4, 0x80, 0xFF),
    (0xFF, 0x45, 0xF3),
    (0xFF, 0x61, 0x8B),
    (0xFF, 0x88, 0x33),
    (0xFF, 0x9C, 0x12),
    (0xFA, 0xBC, 0x20),
    (0x9F, 0xE3, 0x0E),
    (0x2B, 0xF0, 0x35),
    (0x0C, 0xF0, 0xA4),
    (0x05, 0xFB, 0xFF),
    (0x5E, 0x5E, 0x5E),
    (0x0D, 0x0D, 0x0D),
    (0x0D, 0x0D, 0x0D),
    (0xFF, 0xFF, 0xFF),
    (0xA6, 0xFC, 0xFF),
    (0xB3, 0xEC, 0xFF),
    (0xDA, 0xAB, 0xEB),
    (0xFF, 0xA8, 0xF9),
    (0xFF, 0xAB, 0xB3),
    (0xFF, 0xD2, 0xB0),
    (0xFF, 0xEF, 0xA6),
    (0xFF, 0xF7, 0x9C),
    (0xD7, 0xE8, 0x95),
    (0xA6, 0xED, 0xAF),
    (0xA2, 0xF2, 0xDA),
    (0x99, 0xFF, 0xFC),
    (0xDD, 0xDD, 0xDD),
    (0x11, 0x11, 0x11),
    (0x11, 0x11, 0x11),
];
